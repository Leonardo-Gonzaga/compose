services:
  # ------------------------------------------------------------------
  # Core services
  # ------------------------------------------------------------------
  api:
    image: langgenius/dify-api:1.2.0
    restart: always
    env_file: .env
    environment:
      MODE: api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/app/storage:/app/api/storage
    networks:
      - internal

  worker:
    image: langgenius/dify-api:1.2.0
    restart: always
    env_file: .env
    environment:
      MODE: worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/app/storage:/app/api/storage
    networks:
      - internal

  web:
    image: langgenius/dify-web:1.2.0
    restart: always
    env_file: .env
    depends_on:
      - api
    networks:
      - internal

  # ------------------------------------------------------------------
  # Infrastructure
  # ------------------------------------------------------------------
  db:
    image: postgres:15-alpine
    restart: always
    env_file: .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PGUSER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      retries: 20
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    networks:
      - internal

  redis:
    image: redis:6-alpine
    restart: always
    env_file: .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 10
    volumes:
      - ./volumes/redis/data:/data
    networks:
      - internal

  weaviate:
    image: semitechnologies/weaviate:1.19.0
    restart: always
    env_file: .env
    volumes:
      - ./volumes/weaviate:/var/lib/weaviate
    networks:
      - internal

  sandbox:
    image: langgenius/dify-sandbox:0.2.11
    restart: always
    env_file: .env
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SANDBOX_PORT}/health"]
      interval: 30s
      retries: 3
    networks:
      - ssrf_net

  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    env_file: .env
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint:
      - sh
      - -c
      - "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh"
    networks:
      - ssrf_net
      - internal

  nginx:
    image: nginx:latest
    restart: always
    env_file: .env
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - ./nginx/ssl:/etc/ssl
    entrypoint:
      - sh
      - -c
      - "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh"
    depends_on:
      - api
      - web
    networks:
      - internal

# --------------------------------------------------------------------
networks:
  internal:
    driver: bridge
  ssrf_net:
    driver: bridge
    internal: true

volumes:
  app_storage:
  db_data:
  redis_data:
  weaviate_data:
  sandbox_dep:
